/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author sande
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private Main() {
        blackjack = new BlackJack();
        score = 0;
        game_ended = false;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        inHandLabel = new javax.swing.JLabel();
        dealerCount = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        drawButton = new javax.swing.JButton();
        standButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        dealerHand = new javax.swing.JLabel();
        playerHand = new javax.swing.JLabel();
        newGameButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 600));

        inHandLabel.setText("In hand: ");
        dealerCount.setText("Dealer count");

        scoreLabel.setText("Score: ");

        dealerHand.setText("dealer hand");

        playerHand.setText("Kaarten eigen hand");

        // Buttons
        standButton.setText("Stand");
        standButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Stand button clicked");
                standButtonActionPerformed(e);
            }
        });

        drawButton.setText("Hit");
        drawButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Hit button clicked");
                hitButtonActionPerformed(e);
            }
        });

        newGameButton.setText("New Game");
        newGameButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("New game button clicked");
                newGameButtonActionPerformed(e);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(246, 246, 246)
                                                .addComponent(dealerHand, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(228, 228, 228)
                                                .addComponent(dealerCount))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(newGameButton)
                                                .addGap(138, 138, 138)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(playerHand, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(inHandLabel)
                                                                .addGap(45, 45, 45)
                                                                .addComponent(drawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(standButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(35, 35, 35)
                                                                .addComponent(scoreLabel)))))
                                .addContainerGap(217, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(dealerHand, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                                .addComponent(dealerCount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(115, 115, 115)
                                .addComponent(playerHand, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(inHandLabel)
                                        .addComponent(scoreLabel)
                                        .addComponent(drawButton)
                                        .addComponent(standButton)
                                        .addComponent(newGameButton))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    /*
     * EVENT HANDLERS
     */
    private void newGameButtonActionPerformed(ActionEvent evt) {
        // new game
        System.out.println("New game button action");

        blackjack.reset();
        blackjack.play();
        updateLabels();

        game_ended = false;
    }

    private void standButtonActionPerformed(ActionEvent evt) {

        if (blackjack.get_value("player") == 21) {
            // Blackjack!
            playerWin();
        } else if (blackjack.get_value("player") > 21) {
            playerLose();
        } else {
            blackjack.dealer_plays();

            dealerCount.setText( String.valueOf(blackjack.get_value("dealer")) );

            char win_status = blackjack.check_win();
            if (win_status == 'W') { playerWin(); }
            else if (win_status == 'T') { playerTie(); }
            else { playerLose(); }
        }
    }

    private void hitButtonActionPerformed(ActionEvent evt) {
        blackjack.draw_card("player");
        int p_val = blackjack.get_value("player");
        if ( p_val > 21) { playerLose(); }
        else if ( p_val == 21 ) { playerWin(); }
        else { updateLabels(); }
    }


    /*
        ===========
     */

    private void updateLabels() {

        System.out.println("Updating labels...");

        System.out.println("Player hand");
        playerHand.setText(blackjack.show_cards("player"));
        System.out.println("Player cards: " + blackjack.show_cards("player"));

        System.out.println("Dealer hand");
        dealerHand.setText(blackjack.show_cards("dealer"));
        System.out.println("Dealer cards: " + blackjack.show_cards("dealer"));

        System.out.println("Card value in hand - player");
        inHandLabel.setText(String.valueOf(blackjack.get_value("player")));
        System.out.println("Player value" + blackjack.get_value("player"));


        scoreLabel.setText(String.valueOf(score));
    }

    private void playerWin() {
        if (!game_ended) {
            System.out.println("Player WINS");
            score++;
            scoreLabel.setText(String.valueOf(score));
            playerHand.setText("YOU WIN! Score: " + score + " | Your hand: " + blackjack.get_value("player") + " > Dealer hand: " + blackjack.get_value("dealer"));
        }
        game_ended = true;
    }
    private void playerLose() {
        if (!game_ended) {
            System.out.println("Player LOST");
            score--;
            scoreLabel.setText(String.valueOf(score));
            playerHand.setText("YOU LOSE! Score: " + score + " | Your hand: " + blackjack.get_value("player") + " < Dealer hand: " + blackjack.get_value("dealer"));
        }
        game_ended = true;
    }

    private void playerTie() {
        if (!game_ended) {
            System.out.println("Player TIED");
            playerHand.setText("You TIED! Score: " + score + " | Your hand: " + blackjack.get_value("player") + " == Dealer hand: " + blackjack.get_value("dealer"));
        }
        game_ended = true;
    }

    /* == EVENT HANDLERS END == */
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private BlackJack blackjack;
    private int score;
    private boolean game_ended;
    private javax.swing.JLabel dealerHand;
    private javax.swing.JLabel dealerCount;
    private javax.swing.JButton drawButton;
    private javax.swing.JLabel inHandLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton newGameButton;
    private javax.swing.JLabel playerHand;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JButton standButton;
    // End of variables declaration
}
